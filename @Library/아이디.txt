<div id="idArea">
	<label for="id"> 아이디</label> 
		<input type="text"	class="form-control" id="idInput" required name="memId" placeholder="공백없이 소문자,숫자로 5~12글자">
		<button type="button" id="idCheckBtn" onclick="idCheck();">중복확인</button>
</div>


<!-- 아이디 중복확인 클릭 여부 -->
<script>
	$("#idCheckBtn").click(function(){

	$("input[name=checked_id]").val('y');

	})
							
</script>



<Script>
	
		function idCheck(){
 			
 			const idInputf = document.getElementById("idInput");

			// id : 소문자,숫자로 5~12글자
			let regExp = /^(?=.*[a-z])(?=.*\d)[a-z\d]{5,12}$/;
	
			if (!regExp.test(idInputf.value)) {
				alert('유효하지 않은 id를 입력하셨습니다.');
				idInput.select();
				return false;
			}
			
			
 			const $idInput = $("#enroll-form input[name=memId]");
 			
 			$.ajax({
 				url:"idCheck.me",
 				data:{checkId:$idInput.val()},
 				success:function(result){
 					console.log(result)
 					
 					if(result == "NNNNN"){
 		 				alert("이미 사용중인 아이디입니다.")
                        $idInput.val("")
                        $idInput.focus()
 		 			}else if(result == "NNNNY"){
 		 				if($idInput.val() != null){
	 		 				if(confirm("이 아이디를 사용하시겠습니까?")){
	 		 					$idInput.attr("readonly", true)
	 		 					$("#enroll-form :submit").attr("disabled", false);
	 		 					$("#enroll-form :submit").removeAttr("disabled");
	 		 					$idInput.css("backgroundColor", "lightblue")
	 		 				}else { // 취소
	 		 					$idInput.val("")
	 	                        $idInput.focus()
	 	                        $idInput.css("backgroundColor", "")
	 	                       	$idInput.removeAttr("readonly").focus();
	 		 				}
 		 					
 		 				}
 		                
 		            }
 				},
 				
 			});
 			
 			
            
		}
	</Script>


 // 컨트롤러
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String checkId = request.getParameter("checkId");
		
		int count = new MemberService().idCheck(checkId);
		
		if(count > 0) {  //존재하는 아이디가 있음 => 사용불가 => "NNNNN"
			response.getWriter().print("NNNNN");
			
		}else {		//존재하는 아디이가 없음 => 사용가능 => "NNNNY"
			response.getWriter().print("NNNNY");
			
		}
	
	}




//서비스
public int idCheck(String checkId) {
	Connection conn = getConnection();
	
	int count = new MemberDao().idCheck(conn, checkId);
	
	
	if(count > 0) {
		
		
	}else {
		
		
	}
	
	close(conn);

	return count;

}

//다오
public int idCheck(Connection conn, String checkId) {
		// select문 =>  rset필요, int리턴
		int count = 0;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = prop.getProperty("idCheck");
		
		try {
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, checkId);
			
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				count = rset.getInt("count");
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(rset);
			close(pstmt);
		}
		
		return count;
		
		
	}